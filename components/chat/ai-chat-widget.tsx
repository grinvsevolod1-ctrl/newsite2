"use client"

import type React from "react"
import { useState, useRef, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { ScrollArea } from "@/components/ui/scroll-area"
import { useLocale } from "@/contexts/locale-context"
import { usePerformance } from "@/contexts/performance-context"
import {
  MessageCircle,
  X,
  Send,
  Bot,
  User,
  Sparkles,
  Phone,
  Clock,
  DollarSign,
  Code,
  Smartphone,
  MessageSquare,
  Zap,
} from "lucide-react"
import { cn } from "@/lib/utils"

interface Message {
  id: string
  role: "user" | "assistant"
  content: string
}

interface QuickQuestion {
  icon: React.ReactNode
  question: string
  answer: string
  category: string
}

export function AIChatWidget() {
  const { locale } = useLocale()
  const { performanceMode } = usePerformance()
  const [isOpen, setIsOpen] = useState(false)
  const [messages, setMessages] = useState<Message[]>([])
  const [input, setInput] = useState("")
  const [isTyping, setIsTyping] = useState(false)
  const [showQuickQuestions, setShowQuickQuestions] = useState(true)
  const scrollRef = useRef<HTMLDivElement>(null)

  const shouldAnimate = performanceMode !== "low"

  const quickQuestions: QuickQuestion[] =
    locale === "ru"
      ? [
          {
            icon: <DollarSign className="h-4 w-4" />,
            question: "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–π—Ç–∞?",
            answer:
              "–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å–∞–π—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞:\n\n‚Ä¢ –õ–µ–Ω–¥–∏–Ω–≥: –æ—Ç 500 BYN\n‚Ä¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç: –æ—Ç 1500 BYN\n‚Ä¢ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω: –æ—Ç 3000 BYN\n‚Ä¢ –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: –æ—Ç 5000 BYN\n\n–¢–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤ –Ω–∞—à–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, —Å–≤—è–∑–∞–≤—à–∏—Å—å —Å –Ω–∞–º–∏.",
            category: "–¶–µ–Ω—ã",
          },
          {
            icon: <Clock className="h-4 w-4" />,
            question: "–ö–∞–∫–∏–µ —Å—Ä–æ–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏?",
            answer:
              "–°—Ä–æ–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞:\n\n‚Ä¢ –õ–µ–Ω–¥–∏–Ω–≥: 5-10 –¥–Ω–µ–π\n‚Ä¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç: 2-4 –Ω–µ–¥–µ–ª–∏\n‚Ä¢ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω: 4-8 –Ω–µ–¥–µ–ª—å\n‚Ä¢ –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: –æ—Ç 2 –º–µ—Å—è—Ü–µ–≤\n\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ Agile –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ —Å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–º–∏ –¥–µ–º–æ –∏ –º–æ–∂–µ–º —É—Å–∫–æ—Ä–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.",
            category: "–°—Ä–æ–∫–∏",
          },
          {
            icon: <Code className="h-4 w-4" />,
            question: "–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ?",
            answer:
              "–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–µ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π:\n\n‚Ä¢ Frontend: React, Next.js, TypeScript, Tailwind CSS\n‚Ä¢ Backend: Node.js, Python, PostgreSQL, MongoDB\n‚Ä¢ Mobile: React Native, Flutter\n‚Ä¢ AI: OpenAI, TensorFlow, PyTorch\n‚Ä¢ DevOps: Docker, Kubernetes, CI/CD\n\n–í—ã–±–æ—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø—Ä–æ–µ–∫—Ç–∞.",
            category: "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
          },
          {
            icon: <Smartphone className="h-4 w-4" />,
            question: "–†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ –º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?",
            answer:
              "–î–∞! –ú—ã —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:\n\n‚Ä¢ iOS –∏ Android (–Ω–∞—Ç–∏–≤–Ω—ã–µ)\n‚Ä¢ –ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–µ (React Native, Flutter)\n‚Ä¢ PWA (Progressive Web Apps)\n‚Ä¢ Telegram –±–æ—Ç—ã –∏ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n\n–í—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.",
            category: "–£—Å–ª—É–≥–∏",
          },
          {
            icon: <MessageSquare className="h-4 w-4" />,
            question: "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞?",
            answer:
              "–ö–æ–Ω–µ—á–Ω–æ! –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n‚Ä¢ –ë–∞–∑–æ–≤–∞—è: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ (3 –º–µ—Å—è—Ü–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ)\n‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è: –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è + —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ (–æ—Ç 200 BYN/–º–µ—Å)\n‚Ä¢ –ü—Ä–µ–º–∏—É–º: –ø–æ–ª–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ + —Ä–∞–∑–≤–∏—Ç–∏–µ (–æ—Ç 500 BYN/–º–µ—Å)\n\n–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ä–∞–∑–æ–≤–∞—è –ø–æ–º–æ—â—å –ø–æ –∑–∞–ø—Ä–æ—Å—É.",
            category: "–ü–æ–¥–¥–µ—Ä–∂–∫–∞",
          },
          {
            icon: <Phone className="h-4 w-4" />,
            question: "–ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?",
            answer:
              "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º:\n\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: +375 29 141 45 55\nüìß Email: info@netnext.site\nüí¨ Telegram: @netnext_support\n\n–†–∞–±–æ—Ç–∞–µ–º: –ü–Ω-–ü—Ç 9:00-18:00\n–û—Ç–≤–µ—á–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞!",
            category: "–ö–æ–Ω—Ç–∞–∫—Ç—ã",
          },
          {
            icon: <Zap className="h-4 w-4" />,
            question: "–ï—Å—Ç—å –ª–∏ —Å–∫–∏–¥–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤?",
            answer:
              "–î–∞! –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:\n\nüéÅ 15% —Å–∫–∏–¥–∫–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ (–ø—Ä–æ–º–æ–∫–æ–¥: WELCOME15)\nüÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏ –∞—É–¥–∏—Ç –ø—Ä–æ–µ–∫—Ç–∞\nüöÄ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å —Å–∞–π—Ç–∞ —Å –¥—Ä—É–≥–æ–≥–æ —Ö–æ—Å—Ç–∏–Ω–≥–∞\nüíé 3 –º–µ—Å—è—Ü–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤ –ø–æ–¥–∞—Ä–æ–∫\n\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π!",
            category: "–ê–∫—Ü–∏–∏",
          },
        ]
      : [
          {
            icon: <DollarSign className="h-4 w-4" />,
            question: "How much does website development cost?",
            answer:
              "Website development cost depends on project complexity:\n\n‚Ä¢ Landing page: from $50\n‚Ä¢ Corporate website: from $150\n‚Ä¢ E-commerce: from $300\n‚Ä¢ Web application: from $500\n\nYou can calculate exact cost in our calculator or get a personalized quote by contacting us.",
            category: "Pricing",
          },
          {
            icon: <Clock className="h-4 w-4" />,
            question: "What are the development timelines?",
            answer:
              "Development timelines depend on project type:\n\n‚Ä¢ Landing page: 5-10 days\n‚Ä¢ Corporate website: 2-4 weeks\n‚Ä¢ E-commerce: 4-8 weeks\n‚Ä¢ Web application: from 2 months\n\nWe work with Agile methodology with weekly demos and can accelerate development if needed.",
            category: "Timeline",
          },
          {
            icon: <Code className="h-4 w-4" />,
            question: "What technologies do you use?",
            answer:
              "We use modern technology stack:\n\n‚Ä¢ Frontend: React, Next.js, TypeScript, Tailwind CSS\n‚Ä¢ Backend: Node.js, Python, PostgreSQL, MongoDB\n‚Ä¢ Mobile: React Native, Flutter\n‚Ä¢ AI: OpenAI, TensorFlow, PyTorch\n‚Ä¢ DevOps: Docker, Kubernetes, CI/CD\n\nTechnology choice depends on project requirements.",
            category: "Technologies",
          },
          {
            icon: <Smartphone className="h-4 w-4" />,
            question: "Do you develop mobile apps?",
            answer:
              "Yes! We develop mobile applications:\n\n‚Ä¢ iOS and Android (native)\n‚Ä¢ Cross-platform (React Native, Flutter)\n‚Ä¢ PWA (Progressive Web Apps)\n‚Ä¢ Telegram bots and mini-apps\n\nAll apps are adapted to modern standards and optimized for performance.",
            category: "Services",
          },
          {
            icon: <MessageSquare className="h-4 w-4" />,
            question: "Do you provide support after launch?",
            answer:
              "Of course! We offer several support options:\n\n‚Ä¢ Basic: critical bug fixes (3 months free)\n‚Ä¢ Standard: updates + tech support (from $20/month)\n‚Ä¢ Premium: full support + development (from $50/month)\n\nOne-time assistance is also available on request.",
            category: "Support",
          },
          {
            icon: <Phone className="h-4 w-4" />,
            question: "How to contact you?",
            answer:
              "Contact us in a convenient way:\n\nüìû Phone: +375 29 141 45 55\nüìß Email: info@netnext.site\nüí¨ Telegram: @netnext_support\n\nWorking hours: Mon-Fri 9:00-18:00\nWe respond within 1 hour!",
            category: "Contacts",
          },
          {
            icon: <Zap className="h-4 w-4" />,
            question: "Are there discounts for new clients?",
            answer:
              "Yes! Special offers for new clients:\n\nüéÅ 15% discount on first order (promo code: WELCOME15)\nüÜì Free consultation and project audit\nüöÄ Free website migration from another host\nüíé 3 months of technical support as a gift\n\nRegister on the site to get exclusive offers!",
            category: "Promotions",
          },
        ]

  useEffect(() => {
    if (scrollRef.current) {
      scrollRef.current.scrollTop = scrollRef.current.scrollHeight
    }
  }, [messages, isTyping])

  const handleQuickQuestion = (question: QuickQuestion) => {
    const userMessage: Message = {
      id: Date.now().toString(),
      role: "user",
      content: question.question,
    }

    setMessages((prev) => [...prev, userMessage])
    setShowQuickQuestions(false)
    setIsTyping(true)

    // Simulate typing delay
    setTimeout(
      () => {
        const assistantMessage: Message = {
          id: (Date.now() + 1).toString(),
          role: "assistant",
          content: question.answer,
        }
        setMessages((prev) => [...prev, assistantMessage])
        setIsTyping(false)
      },
      1000 + Math.random() * 1000,
    )
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!input.trim() || isTyping) return

    const userMessage: Message = {
      id: Date.now().toString(),
      role: "user",
      content: input.trim(),
    }

    setMessages((prev) => [...prev, userMessage])
    setInput("")
    setShowQuickQuestions(false)
    setIsTyping(true)

    // Find matching quick question or provide default response
    const matchedQuestion = quickQuestions.find((q) =>
      input.toLowerCase().includes(q.question.toLowerCase().split(" ").slice(0, 3).join(" ").toLowerCase()),
    )

    setTimeout(
      () => {
        const response = matchedQuestion
          ? matchedQuestion.answer
          : locale === "ru"
            ? "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\n\nüìû +375 29 141 45 55\nüìß info@netnext.site\nüí¨ Telegram: @netnext_support\n\n–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞!"
            : "Thank you for your question! For detailed consultation, please contact us:\n\nüìû +375 29 141 45 55\nüìß info@netnext.site\nüí¨ Telegram: @netnext_support\n\nWe will respond within 1 hour!"

        const assistantMessage: Message = {
          id: (Date.now() + 1).toString(),
          role: "assistant",
          content: response,
        }
        setMessages((prev) => [...prev, assistantMessage])
        setIsTyping(false)
      },
      1000 + Math.random() * 1000,
    )
  }

  return (
    <>
      <div className="fixed bottom-3 right-3 sm:bottom-4 sm:right-4 md:bottom-6 md:right-6 z-50">
        {shouldAnimate && (
          <div className="absolute inset-0 bg-gradient-to-r from-primary via-accent to-secondary rounded-full blur-xl opacity-60 animate-pulse" />
        )}

        <Button
          onClick={() => setIsOpen(!isOpen)}
          size="lg"
          className={cn(
            "relative h-12 w-12 sm:h-14 sm:w-14 md:h-16 md:w-16 rounded-full shadow-2xl",
            "bg-gradient-to-br from-primary via-accent to-secondary",
            shouldAnimate && "hover:scale-110 hover:shadow-[0_0_40px_rgba(34,211,238,0.6)] transition-all duration-300",
            "border-2 border-white/20",
            "group overflow-hidden",
            isOpen && "rotate-90",
          )}
        >
          {shouldAnimate && (
            <div className="absolute inset-0 bg-gradient-to-br from-primary/50 via-accent/50 to-secondary/50 animate-gradient-shift" />
          )}

          <div className="relative z-10">
            {isOpen ? (
              <X className="h-5 w-5 sm:h-6 sm:w-6 md:h-7 md:w-7 text-white transition-transform group-hover:rotate-90" />
            ) : (
              <MessageCircle className="h-5 w-5 sm:h-6 sm:w-6 md:h-7 md:w-7 text-white transition-transform group-hover:scale-110" />
            )}
          </div>

          {!isOpen && (
            <Sparkles className="absolute top-0.5 right-0.5 sm:top-1 sm:right-1 h-3 w-3 sm:h-4 sm:w-4 text-white animate-pulse" />
          )}
        </Button>

        {!isOpen && messages.length === 0 && (
          <div className="absolute -top-1 -right-1 h-4 w-4 sm:h-5 sm:w-5 bg-red-500 rounded-full border-2 border-background flex items-center justify-center animate-bounce">
            <span className="text-[9px] sm:text-[10px] font-bold text-white">!</span>
          </div>
        )}
      </div>

      {isOpen && (
        <Card
          className={cn(
            "fixed z-50 shadow-2xl flex flex-col border-2 border-primary/20 bg-background/95 backdrop-blur-xl",
            shouldAnimate && "animate-in slide-in-from-bottom-4 duration-300",
            "bottom-[4.5rem] right-3 left-3",
            "max-h-[calc(100vh-6rem)]",
            "sm:bottom-20 sm:right-4 sm:left-auto sm:w-[380px] sm:h-[550px]",
            "md:bottom-24 md:right-6 md:w-[420px] md:h-[600px]",
            "lg:w-[440px] lg:h-[650px]",
          )}
        >
          <CardHeader className="border-b border-primary/20 bg-gradient-to-r from-primary/10 via-accent/10 to-secondary/10 backdrop-blur-sm shrink-0 p-3 sm:p-4">
            <CardTitle className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <div className="relative">
                  <div className="absolute inset-0 bg-gradient-to-br from-primary to-accent rounded-full blur-md opacity-60" />
                  <div className="relative h-8 w-8 sm:h-9 sm:w-9 md:h-10 md:w-10 rounded-full bg-gradient-to-br from-primary to-accent flex items-center justify-center">
                    <Bot className="h-4 w-4 sm:h-4.5 sm:w-4.5 md:h-5 md:w-5 text-white" />
                  </div>
                </div>
                <div className="min-w-0">
                  <div className="font-bold text-sm sm:text-base md:text-lg gradient-text truncate">
                    {locale === "ru" ? "AI –ü–æ–º–æ—â–Ω–∏–∫" : "AI Assistant"}
                  </div>
                  <div className="text-[10px] sm:text-xs text-muted-foreground font-normal truncate">
                    {locale === "ru" ? "–û–Ω–ª–∞–π–Ω ‚Ä¢ –û—Ç–≤–µ—á–∞–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ" : "Online ‚Ä¢ Responds instantly"}
                  </div>
                </div>
              </div>
              <Button
                variant="ghost"
                size="icon"
                onClick={() => setIsOpen(false)}
                className="h-7 w-7 sm:h-8 sm:w-8 rounded-full hover:bg-primary/10 shrink-0"
              >
                <X className="h-3.5 w-3.5 sm:h-4 sm:w-4" />
              </Button>
            </CardTitle>
          </CardHeader>

          <CardContent className="flex-1 flex flex-col p-0 min-h-0 overflow-hidden">
            <ScrollArea className="flex-1 p-3 sm:p-4" ref={scrollRef}>
              <div className="space-y-3">
                {messages.length === 0 && (
                  <div className="space-y-4">
                    <div className="text-center py-4 space-y-3">
                      <div className="relative inline-block">
                        <div className="absolute inset-0 bg-gradient-to-br from-primary to-accent rounded-full blur-xl opacity-40 animate-pulse" />
                        <div className="relative h-14 w-14 sm:h-16 sm:w-16 md:h-20 md:w-20 mx-auto rounded-full bg-gradient-to-br from-primary to-accent flex items-center justify-center">
                          <Bot className="h-7 w-7 sm:h-8 sm:w-8 md:h-10 md:w-10 text-white" />
                        </div>
                      </div>
                      <div className="space-y-2 px-3 sm:px-4">
                        <p className="text-sm sm:text-base md:text-lg font-semibold gradient-text">
                          {locale === "ru" ? "–ü—Ä–∏–≤–µ—Ç! üëã" : "Hello! üëã"}
                        </p>
                        <p className="text-xs sm:text-sm text-muted-foreground max-w-xs mx-auto leading-relaxed">
                          {locale === "ru"
                            ? "–Ø –ø–æ–º–æ—â–Ω–∏–∫ NetNext. –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –Ω–∏–∂–µ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π!"
                            : "I'm NetNext assistant. Choose a question below or ask your own!"}
                        </p>
                      </div>
                    </div>

                    {showQuickQuestions && (
                      <div className="space-y-2">
                        <p className="text-xs font-medium text-muted-foreground px-1">
                          {locale === "ru" ? "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:" : "Popular questions:"}
                        </p>
                        <div className="grid gap-2">
                          {quickQuestions.map((q, index) => (
                            <button
                              key={index}
                              onClick={() => handleQuickQuestion(q)}
                              className="flex items-center gap-2 p-2.5 rounded-lg bg-muted/50 hover:bg-muted border border-primary/10 hover:border-primary/30 transition-all text-left group"
                            >
                              <div className="h-8 w-8 rounded-full bg-gradient-to-br from-primary/20 to-accent/20 flex items-center justify-center shrink-0 group-hover:scale-110 transition-transform">
                                {q.icon}
                              </div>
                              <div className="flex-1 min-w-0">
                                <p className="text-xs font-medium text-foreground truncate">{q.question}</p>
                                <p className="text-[10px] text-muted-foreground">{q.category}</p>
                              </div>
                            </button>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                )}

                {messages.map((message) => (
                  <div
                    key={message.id}
                    className={cn(
                      "flex gap-2 animate-in fade-in-0 slide-in-from-bottom-2 duration-300",
                      message.role === "user" ? "justify-end" : "justify-start",
                    )}
                  >
                    {message.role === "assistant" && (
                      <div className="h-6 w-6 sm:h-7 sm:w-7 md:h-8 md:w-8 rounded-full bg-gradient-to-br from-primary to-accent flex items-center justify-center shrink-0 shadow-lg">
                        <Bot className="h-3 w-3 sm:h-3.5 sm:w-3.5 md:h-4 md:w-4 text-white" />
                      </div>
                    )}
                    <div
                      className={cn(
                        "rounded-2xl px-3 py-2 sm:px-3.5 sm:py-2.5 max-w-[85%] sm:max-w-[80%] md:max-w-[75%] shadow-md",
                        message.role === "user"
                          ? "bg-gradient-to-br from-primary to-accent text-white"
                          : "bg-muted/50 backdrop-blur-sm text-foreground border border-primary/10",
                      )}
                    >
                      <p className="text-xs sm:text-sm leading-relaxed whitespace-pre-wrap break-words">
                        {message.content}
                      </p>
                    </div>
                    {message.role === "user" && (
                      <div className="h-6 w-6 sm:h-7 sm:w-7 md:h-8 md:w-8 rounded-full bg-gradient-to-br from-secondary to-accent flex items-center justify-center shrink-0 shadow-lg">
                        <User className="h-3 w-3 sm:h-3.5 sm:w-3.5 md:h-4 md:w-4 text-white" />
                      </div>
                    )}
                  </div>
                ))}

                {isTyping && (
                  <div className="flex gap-2 justify-start animate-in fade-in-0 slide-in-from-bottom-2 duration-300">
                    <div className="h-6 w-6 sm:h-7 sm:w-7 md:h-8 md:w-8 rounded-full bg-gradient-to-br from-primary to-accent flex items-center justify-center shrink-0 shadow-lg">
                      <Bot className="h-3 w-3 sm:h-3.5 sm:w-3.5 md:h-4 md:w-4 text-white" />
                    </div>
                    <div className="rounded-2xl px-3 py-2 sm:px-3.5 sm:py-2.5 bg-muted/50 backdrop-blur-sm border border-primary/10">
                      <div className="flex gap-1.5">
                        <div className="h-1.5 w-1.5 sm:h-2 sm:w-2 rounded-full bg-primary animate-bounce" />
                        <div className="h-1.5 w-1.5 sm:h-2 sm:w-2 rounded-full bg-accent animate-bounce [animation-delay:0.2s]" />
                        <div className="h-1.5 w-1.5 sm:h-2 sm:w-2 rounded-full bg-secondary animate-bounce [animation-delay:0.4s]" />
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </ScrollArea>

            <form
              onSubmit={handleSubmit}
              className="p-2.5 sm:p-3 md:p-4 border-t border-primary/20 bg-muted/30 backdrop-blur-sm shrink-0"
            >
              <div className="flex gap-1.5 sm:gap-2">
                <Input
                  value={input}
                  onChange={(e) => setInput(e.target.value)}
                  placeholder={locale === "ru" ? "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." : "Type a message..."}
                  disabled={isTyping}
                  className="flex-1 bg-background border-2 border-primary/30 focus:border-primary focus-visible:ring-2 focus-visible:ring-primary/20 rounded-xl text-xs sm:text-sm h-10 sm:h-11 px-3 sm:px-4 placeholder:text-muted-foreground/60 transition-all"
                />
                <Button
                  type="submit"
                  size="icon"
                  disabled={isTyping || !input.trim()}
                  className="h-10 w-10 sm:h-11 sm:w-11 rounded-xl bg-gradient-to-br from-primary to-accent hover:scale-105 transition-transform shadow-lg disabled:opacity-50 disabled:cursor-not-allowed shrink-0"
                >
                  <Send className="h-4 w-4 sm:h-4.5 sm:w-4.5 text-white" />
                </Button>
              </div>
            </form>
          </CardContent>
        </Card>
      )}
    </>
  )
}
